networks:
  proxy:
    external: true          # shared with Nginx Proxy Manager
  wordpress:
    driver: bridge          # internal WP network

volumes:
  db_data:
  wp_data:
  nginx_cache:
  redis_data:

services:
  db:
    image: mariadb:11.4
    container_name: wp_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      DB_NAME_ONE: ${DB_NAME_ONE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./database/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - wordpress

  php:
    build:
      context: ./php
      dockerfile: Dockerfile
    container_name: wp_php
    restart: unless-stopped
    environment:
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      WP_URL: ${WP_URL}
      WP_TITLE: ${WP_TITLE}
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WP_PLUGINS: ${WP_PLUGINS}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
    volumes:
      - wp_data:/var/www/html
      - nginx_cache:/var/cache/nginx
    depends_on:
      - db
    networks:
      - wordpress

  nginx:
    image: nginx:stable
    container_name: wp_nginx
    restart: unless-stopped
    volumes:
      - wp_data:/var/www/html:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.base.conf:/etc/nginx/nginx.conf:ro
      - nginx_cache:/var/cache/nginx
    ports:
      - ${WP_LOCAL_PORT}:80   # local dev access; NPM reaches it via 'proxy' network
    command: ["sh", "-c", "mkdir -p /var/cache/nginx/fastcgi_temp /var/cache/nginx/proxy_temp /var/cache/nginx/scgi_temp /var/cache/nginx/uwsgi_temp /var/cache/nginx/client_temp && chown -R www-data:www-data /var/cache/nginx && exec nginx -g 'daemon off;'"]
    networks:
      - proxy
      - wordpress
    depends_on:
      - php

  redis:
    image: redis:7
    container_name: wp_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - wordpress

  phpmyadmin:
    image: phpmyadmin:5
    container_name: wp_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_USER: root
      PMA_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - "127.0.0.1:${PMA_LOCAL_PORT}:80"  # local-only
    depends_on:
      - db
    networks:
      - wordpress

  backup:
    build: ./backup
    container_name: wp_backup
    restart: unless-stopped
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      BACKUP_KEEP: ${BACKUP_KEEP}
    volumes:
      - wp_data:/var/www/html
      - ./backups:/backups
    depends_on:
      - db
    networks:
      - wordpress

  backup-gui:
    build: ./backup-gui
    container_name: wp_backup_gui
    restart: unless-stopped
    environment:
      - MODE=docker-exec
      - WP_CONTAINER=wp_backup
      - SCRIPTS_DIR=/usr/local/bin
      - BACKUPS_DIR=/backups
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backups:/backups:rw
      - ./backup:/backup:ro
      - wp_data:/var/www/html
    ports:
      - "8088:8080"
    depends_on:
      - backup
      - db
    networks:
      - wordpress
